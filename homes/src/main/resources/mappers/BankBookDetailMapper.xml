<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.homes.ds.mapper.BankBookDetailMapper">

	<!-- 가계부 상세 정보 Result Map -->
	<resultMap type="bankBookDetail" id="bankBookDetailList" autoMapping="true">
		<id property="bankBookDetailIdx" column="BankBookDetailIdx"/>
		
		<!-- 대분류 collection -->
		<collection ofType="category" property="category1">
			<id 	property="categoryIdx" 	column="Category1Idx"/>
			<result property="categoryCode" column="Category1Code"/>
			<result property="categoryName"	column="Category1Name"/>
		</collection>
		
		<!-- 중분류 collection -->
		<collection ofType="category" property="category2">
			<id 	property="categoryIdx" 	column="Category2Idx"/>
			<result property="categoryCode" column="Category2Code"/>
			<result property="categoryName"	column="Category2Name"/>
		</collection>
		
		<!-- 소분류 collection -->
		<collection ofType="category" property="category3">
			<id 	property="categoryIdx" 	column="Category3Idx"/>
			<result property="categoryCode" column="Category3Code"/>
			<result property="categoryName"	column="Category3Name"/>
		</collection>
	</resultMap>
	
	<!-- 가계 상세 정보 목록 조회 -->
	<select id="list" parameterType="com.homes.ds.dto.PagingDTO" resultMap="bankBookDetailList">
		SELECT
			<!-- 가계 상세 정보 -->
			BBD.BankBookDetailIdx,			<!-- PK -->
			BBD.BankBookIdx,				<!-- 가계 FK -->
			BBD.HomeIdx,					<!-- Home FK -->
			BBD.Category1Idx,
			BBD.Category2Idx,
			BBD.Category3Idx,
			BBD.Content,
			BBD.Amount,
			BBD.AmountType,
			BBD.AmountDate,
			
			<!-- 대분류 정보 -->
			C1.CategoryIdx		AS Category1Idx,
			C1.CategoryCode		AS Category1Code,
			C1.CategoryName		AS Category1Name,
			
			<!-- 중분류 정보 -->
			C2.CategoryIdx		AS Category2Idx,
			C2.CategoryCode		AS Category2Code,
			C2.CategoryName		AS Category2Name,
			
			<!-- 소분류 정보 -->
			C3.CategoryIdx		AS Category3Idx,
			C3.CategoryCode		AS Category3Code,
			C3.CategoryName		AS Category3Name
			
		<!-- 공통 조건 -->
		<include refid="listOfWhere"></include>	  
	 
		ORDER BY BBD.AmountDate DESC, BBD.CreateDate DESC
	 
 		LIMIT #{page}, #{limit}
	</select>
	
	<!-- 가계 상세 목록 total count -->
	<select id="listForTotalCount" parameterType="com.homes.ds.dto.PagingDTO" resultType="Long">
		SELECT COUNT(BBD.BankBookDetailIdx)
		<!-- 공통 조건 -->
		<include refid="listOfWhere"></include>	  
	</select>
	
	<!-- 목록 조회 공통 조건 -->
	<sql id="listOfWhere">
		FROM BankBookDetail AS BBD
		
		<!-- 대분류 JOIN -->
	  	LEFT JOIN Category AS C1 ON C1.CategoryIdx = BBD.Category1Idx
		<!-- 중분류 JOIN --> 
		LEFT JOIN Category AS C2 ON C2.CategoryIdx = BBD.Category2Idx
	  	<!-- 소분류 JOIN -->
		LEFT JOIN Category AS C3 ON C3.CategoryIdx = BBD.Category3Idx
		    
		WHERE BBD.BankBookIdx 	= #{model.bankBookIdx}
	      AND BBD.HomeIdx		= #{model.homeIdx}
	    
	    <!-- 1. 유형 검색 --> 
	    <if test='@com.homes.ds.util.StringUtil@isNotEmpty(model.amountType) and !"ALL".equals(model.amountType)'>
	    	AND BBD.AmountType = #{model.amountType}
	    </if>
	    
	    <!-- 2. 금액 범위 검색 -->
	    <if test='@com.homes.ds.util.StringUtil@isNotEmpty(startAmount) and startAmount != 0'>
	    	AND BBD.Amount >= #{startAmount}
	    </if>
	    <if test='@com.homes.ds.util.StringUtil@isNotEmpty(endAmount) and endAmount != 0'>
	    	AND BBD.Amount <![CDATA[<=]]> #{endAmount}
	    </if>
	    
	    <!-- 3. 입출금 일자 검색 -->
		<if test="@com.homes.ds.util.StringUtil@isNotEmpty(startDateStr1)">
			AND DATE_FORMAT(BBD.AmountDate, '%y%m%d') >= DATE_FORMAT(#{startDateStr1}, '%y%m%d')
		</if>
		<if test="@com.homes.ds.util.StringUtil@isNotEmpty(endDateStr1)">
			AND DATE_FORMAT(BBD.AmountDate, '%y%m%d') <![CDATA[<=]]> DATE_FORMAT(#{endDateStr1}, '%y%m%d')
		</if>

		<!-- 4. 비고 검색 -->		
		<if test="@com.homes.ds.util.StringUtil@isNotEmpty(model.content)">
			AND BBD.Content LIKE CONCAT('%', TRIM(#{model.content}), '%')
		</if>
		
		<!-- 분류 검색 -->
		<if test="@com.homes.ds.util.StringUtil@isNotEmpty(model.category1Idx)">
			AND BBD.Category1Idx = #{model.category1Idx}
		</if>
		<if test="@com.homes.ds.util.StringUtil@isNotEmpty(model.category2Idx)">
			AND BBD.Category2Idx = #{model.category2Idx}
		</if>
		<if test="@com.homes.ds.util.StringUtil@isNotEmpty(model.category3Idx)">
			AND BBD.Category3Idx = #{model.category3Idx}
		</if>
	</sql>
	
	<select id="detail" parameterType="int" resultMap="bankBookDetailList">
		SELECT
			<!-- 가계 상세 정보 -->
			BBD.BankBookDetailIdx,			<!-- PK -->
			BBD.BankBookIdx,				<!-- 가계 FK -->
			BBD.HomeIdx,					<!-- Home FK -->
			BBD.Category1Idx,
			BBD.Category2Idx,
			BBD.Category3Idx,
			BBD.Content,
			BBD.Amount,
			BBD.AmountType,
			BBD.AmountDate,
			
			<!-- 대분류 정보 -->
			C1.CategoryIdx		AS Category1Idx,
			C1.CategoryCode		AS Category1Code,
			C1.CategoryName		AS Category1Name,
			
			<!-- 중분류 정보 -->
			C2.CategoryIdx		AS Category2Idx,
			C2.CategoryCode		AS Category2Code,
			C2.CategoryName		AS Category2Name,
			
			<!-- 소분류 정보 -->
			C3.CategoryIdx		AS Category3Idx,
			C3.CategoryCode		AS Category3Code,
			C3.CategoryName		AS Category3Name
			
		FROM BankBookDetail AS BBD
		
		<!-- 대분류 JOIN -->
	  	LEFT JOIN Category AS C1 ON C1.CategoryIdx = BBD.Category1Idx
		<!-- 중분류 JOIN --> 
		LEFT JOIN Category AS C2 ON C2.CategoryIdx = BBD.Category2Idx
	  	<!-- 소분류 JOIN -->
		LEFT JOIN Category AS C3 ON C3.CategoryIdx = BBD.Category3Idx
		    
		WHERE BBD.BankBookDetailIdx 	= #{bankBookDetailIdx}
	</select>
	
	<!-- 가계 상세 정보 등록 -->
	<insert id="insert" parameterType="bankBookDetail">
		INSERT INTO BankBookDetail
		(
			BankBookIdx,
			HomeIdx,
			Category1Idx,
			Category2Idx,
			Category3Idx,
			Content,
			Amount,
			AmountType,
			AmountDate
		)
		VALUES
		(
			#{bankBookIdx},
			#{homeIdx},
			#{category1Idx},
			#{category2Idx},
			#{category3Idx},
			#{content},
			#{amount},
			#{amountType},
			#{amountDate}
		)
	</insert>
	
	<!-- 가계 상세 정보 수정 -->
	<update id="update" parameterType="bankBookDetail">
		UPDATE BankBookDetail
		   SET
		   		Category1Idx 	= #{category1Idx},
		   		Category2Idx 	= #{category2Idx},
		   		Category3Idx 	= #{category3Idx},
		   		Content 		= #{content},
		   		Amount 			= #{amount},
		   		AmountType 		= #{amountType},
		   		AmountDate 		= #{amountDate}
		   		
		 WHERE BankBookDetailIdx = #{bankBookDetailIdx}
	</update>
	
	<!-- 가계 상세 정보 삭제 -->
	<delete id="delete" parameterType="com.homes.ds.dto.BankBookDetailDTO">
		DELETE FROM BankBookDetail
		 WHERE BankBookDetailIdx IN
		 <foreach collection="deleteList" item="bankBookDetailIdx" index="index" separator="," open="(" close=")">
			  #{bankBookDetailIdx}
		 </foreach>
	</delete>
	
	<!-- 통장 삭제시 통장의 상세정보 전체 삭제 -->
	<delete id="deleteOfBankBook" parameterType="int">
		DELETE FROM BankBookDetail WHERE BankBookIdx = #{bankBookIdx}
	</delete>
</mapper>