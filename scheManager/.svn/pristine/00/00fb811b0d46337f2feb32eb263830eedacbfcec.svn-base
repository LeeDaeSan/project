package com.dm.sche.security;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.dm.sche.mapper.MemberMapper;
import com.dm.sche.model.Member;

@Service
public class CustomUserDetailsService implements UserDetailsService {
	
	@Autowired
	private HttpServletRequest request;

	@Autowired
	private MemberMapper memberMapper;

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		Member member = memberMapper.getMemberInfo(username);
		
		String password = new BCryptPasswordEncoder().encode(member.getPassword());
		
		List<String> roles = new ArrayList<String>();
		roles.add("USER");
		
		User user = new SecurityUser(username, password, true, true, true, true, makeGrantedAuthority(roles));
		return user;
	}
	
	private static List<GrantedAuthority> makeGrantedAuthority(List<String> roles){
        List<GrantedAuthority> list = new ArrayList<>();
        roles.forEach(role -> list.add(new SimpleGrantedAuthority("USER")));
        return list;
    }

}
